name: Azure Static Web Apps CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [ main ]

jobs:
  build_and_deploy_job:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    permissions:
      id-token: write # OIDC 인증을 위해 필수
      contents: read
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          lfs: false

      # OIDC를 사용해 Azure에 로그인하는 단계
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # 빌드 및 배포 단계 (API 토큰 없이 실행)
      - name: Build and Deploy
        id: builddeploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          ###### ↓↓↓ 이 값들은 본인 프로젝트에 맞게 다시 확인해주세요! ↓↓↓ ######
          app_location: "frontend" # 프론트엔드 코드의 루트 폴더
          api_location: "api" # API 코드의 루트 폴더 (없으면 "" 또는 생략)
          output_location: "build" # 빌드 결과물이 생성되는 폴더

  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    permissions:
      id-token: write
    steps:
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          
      - name: Close Pull Request
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@v1
        with:
          action: "close"
